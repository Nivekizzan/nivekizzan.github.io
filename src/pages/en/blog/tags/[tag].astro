---
import BlogItemH from '@components/atom/BlogItemH.astro';
import Flex from '@components/design/flex/Flex.astro';
import Texto from '@components/design/texto/Texto.astro';
import LayoutAside from '@layouts/LayoutAside.astro';
import type { MarkdownInstance } from 'astro';

export async function getStaticPaths() {
  const allArticles: MarkdownInstance<Record<string, any>>[] =
    await Astro.glob('../article/*.md');

  const uniqueTags = [
    ...new Set(allArticles.map((article) => article.frontmatter.tags).flat()),
  ];

  return uniqueTags.map((tag) => {
    const filteredArticles = allArticles.filter((article) =>
      article.frontmatter.tags?.includes(tag)
    );

    return {
      params: { tag },
      props: { articles: filteredArticles },
    };
  });
}

const { tag } = Astro.params;
const { articles } = Astro.props;

const filteredArticles = articles.filter(
  (article) => article.frontmatter.status === 'published'
);
---

<LayoutAside
  title={`Kizen Blog | Tag: ${tag}`}
  description={`List of articles with the ${tag} tag.`}
>
  <Flex as="section" class="lg:col-span-2" slot="main">
    <Texto as="p" class="text-xl md:text-3xl font-bold text-zinc-100">
      List of articles with the <span class="italic">{tag}</span> tag
    </Texto>
    <ul class="space-y-2">
      {
        (filteredArticles.length > 0 &&
          articles.map((article: any) => (
            <BlogItemH
              title={article.frontmatter.title}
              description={article.frontmatter.description}
              icon={article.frontmatter.icon.url}
              iconalt={article.frontmatter.icon.alt}
              lang="/en"
            />
          ))) || (
          <Texto
            as="p"
            class="text-lg font-semibold mt-8 ml-2"
            title="There are no articles with this tag."
          />
        )
      }
    </ul>
  </Flex>
</LayoutAside>

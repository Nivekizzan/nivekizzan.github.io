---
import Flex from '@components/design/flex/Flex.astro';
import Layout from './Layout.astro';

interface Props {
  frontmatter: {
    status: 'draft' | 'published' | 'archived';

    title: string;
    description: string;
    author: string;

    pubDate: string;
    lastMod: string;

    image?: {
      url: string;
      alt: string;
    };

    icon: {
      url: string;
      alt: string;
    };

    tags: string[];
  };
}

const { frontmatter } = Astro.props;

const STATUS = ['draft', 'published', 'archived'];
const status: 'draft' | 'published' | 'archived' =
  !frontmatter.status || !STATUS.includes(frontmatter.status)
    ? 'draft'
    : frontmatter.status;

import Texto from '@components/design/texto/Texto.astro';

// author from /blog/author/[author].md
const allAuthor = await Astro.glob('../pages/blog/author/*.md');
const author = allAuthor.find(
  (page) => page.frontmatter.author === frontmatter.author,
);

import IconGithub from '@components/icons/IconGitHub.astro';
import IconLinkedIn from '@components/icons/IconLinkedIn.astro';
import IconTwitter from '@components/icons/IconTwitter.astro';

const HEADINGS = ['#', '##', '###', '####'];

const getReadTime = (content: string) => {
  const wordsPerMinute = 200;
  const numberOfWords = content
    .split(/\s/g)
    .filter(
      (word) =>
        word !== '' && !HEADINGS.includes(word) && !word.startsWith('```'),
    ).length;
  const minutes = numberOfWords / wordsPerMinute;
  const readTime = Math.ceil(minutes);
  return readTime;
};

const currentArticle = await Astro.glob('../pages/blog/article/*.md').then(
  (pages) => pages.find((page) => page.frontmatter.title === frontmatter.title),
);

const minutesToRead = getReadTime(currentArticle?.rawContent() || '');
const readTime = minutesToRead === 1 ? '1' : `${minutesToRead}`;

const articleIconPaths = frontmatter.icon.url
  .replace(
    '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">',
    '',
  )
  .replace('</svg>', '');
---

<Layout
  title={`${frontmatter.title} | Kizen Blog`}
  description={frontmatter.description}
>
  <main class="max-w-[100ch] mx-auto">
    {
      (status === 'draft' && (
        <div class="bg-zinc-800 text-zinc-100 p-4 rounded-md mb-8">
          <Texto
            as="p"
            title="Este artículo es un borrador y aún no está publicado."
            class="text-base md:text-lg font-normal"
          />
        </div>
      )) || (
        <>
          {status === 'archived' && (
            <div class="bg-zinc-800 text-zinc-100 p-4 rounded-md mb-8">
              <Texto
                as="p"
                title="Este artículo está archivado y ya no se actualiza."
                class="text-base md:text-lg font-normal"
              />
            </div>
          )}

          <>
            {(frontmatter.image && (
              <img
                src={frontmatter.image?.url}
                alt={frontmatter.image?.alt}
                class="w-full h-[300px] object-contain object-center"
              />
            )) ||
              (frontmatter.icon && (
                <svg
                  id="article-image"
                  class="w-full h-[300px] object-contain object-center"
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  stroke-width="1.5"
                  stroke="currentColor"
                  fill="none"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  aria-label={frontmatter.icon.alt}
                >
                  {articleIconPaths}
                </svg>
              ))}
          </>

          <Texto
            as="h1"
            title={frontmatter.title}
            class="text-3xl md:text-4xl font-bold text-zinc-100 mb-2"
          />

          <Flex row space="between" class="items-center">
            <Texto
              as="p"
              title={`By ${frontmatter.author} • ${readTime} min de lectura`}
              class="text-base md:text-lg font-normal text-zinc-100 mb-4"
              width={0}
            />
            <Flex as="span" row class="w-fit">
              {/*<button id="btn-like" class="flex gap-2" onclick="sendLike()">
                <span id="likeCount">0</span> likes
              </button>*/}
              <Texto
                as="p"
                title={`${frontmatter.pubDate}`}
                class="text-base md:text-lg font-normal text-zinc-100 mb-4"
                width={0}
              />
            </Flex>
          </Flex>

          <Texto
            as="h3"
            title={frontmatter.description}
            class="text-lg md:text-xl font-semibold text-zinc-100 mb-4"
          />

          <Flex row class="w-fit">
            <Texto as="p" title="Compartir:" class="text-lg" />
            <a
              href={`https://twitter.com/intent/tweet?text=${frontmatter.title}&url=${Astro.url}`}
              target="_blank"
              rel="noopener noreferrer"
              aria-label="Compartir en Twitter"
              class="inline-flex items-center w-[32px] h-[32px] p-[4px] rounded-md overflow-hidden hover:bg-zinc-800"
            >
              <IconTwitter />
            </a>
            {/*<a
              href={`https://www.linkedin.com/shareArticle?mini=true&url=${Astro.url}&title=${frontmatter.title}`}
              target="_blank"
              rel="noopener noreferrer"
              aria-label="Compartir en LinkedIn"
              class="inline-flex items-center w-[32px] h-[32px] p-[4px] rounded-md overflow-hidden hover:bg-zinc-800"
            >
              <IconLinkedIn />
            </a>//*/}
          </Flex>

          <span id="md">
            <slot />
          </span>

          {author && (
            <article class="flex flex-col items-center gap-[32px] lg:grid grid-cols-3 pt-24 border-t-2 border-zinc-800">
              <img
                src={author.frontmatter.image.url}
                alt={author.frontmatter.image.alt}
                class="w-[256px] h-[256px] rounded-full justify-self-center min-w-[256px]"
              />
              <Flex gap={2} class="col-span-2">
                <Texto
                  as="h4"
                  title={author.frontmatter.author}
                  class="text-lg md:text-xl font-semibold text-zinc-100 mb-1 text-center lg:text-left"
                />
                <Texto
                  id="author-description"
                  as="p"
                  title={author.frontmatter.description}
                  class="text-base md:text-lg font-normal text-zinc-100 mb-4 pr-4 max-h-[168px] overflow-y-scroll"
                />
                <Flex row class="w-fit max-h-[64px] mt-auto">
                  {author.frontmatter.socials.map((social: any) => {
                    return (
                      <a
                        href={social.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        aria-label={`Ir a al perfil de ${author.frontmatter.author} en ${social.name}`}
                        class="inline-flex items-center w-[40px] h-[40px] p-[4px] rounded-md overflow-hidden hover:bg-zinc-800"
                      >
                        {social.name === 'Twitter' ? (
                          <IconTwitter />
                        ) : social.name === 'GitHub' ? (
                          <IconGithub />
                        ) : social.name === 'LinkedIn' ? (
                          <IconLinkedIn />
                        ) : (
                          social.name
                        )}
                      </a>
                    );
                  })}
                </Flex>
              </Flex>
            </article>
          )}

          <Flex>
            <Texto
              as="h4"
              title="Tags:"
              class="text-lg md:text-xl font-semibold text-zinc-100 mt-8"
            />
            <ul class="flex flex-wrap gap-2 m-0 p-0">
              {frontmatter.tags.map((tag: string) => (
                <li
                  class="bg-zinc-800 font-semibold rounded-lg text-center hover:bg-zinc-700 list-none p-0 m-0 min-w-fit"
                  title={tag}
                >
                  <a
                    class="inline-block w-full px-2 py-1"
                    href={`/blog/tags/${tag}`}
                  >
                    {tag}
                  </a>
                </li>
              ))}
            </ul>
          </Flex>
        </>
      )
    }
  </main>

  <span class="notification-list">
    <span class="notification-item">
      <p class="notification-text"></p>
    </span>
  </span>
</Layout>

<svg
  id="code-block-copy-svg"
  xmlns="http://www.w3.org/2000/svg"
  class="hidden"
  width="24"
  height="24"
  viewBox="0 0 24 24"
  stroke-width="1.5"
  stroke="currentColor"
  fill="none"
  stroke-linecap="round"
  stroke-linejoin="round"
  ><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path
    d="M7 7m0 2.667a2.667 2.667 0 0 1 2.667 -2.667h8.666a2.667 2.667 0 0 1 2.667 2.667v8.666a2.667 2.667 0 0 1 -2.667 2.667h-8.666a2.667 2.667 0 0 1 -2.667 -2.667z"
  ></path><path
    d="M4.012 16.737a2.005 2.005 0 0 1 -1.012 -1.737v-10c0 -1.1 .9 -2 2 -2h10c.75 0 1.158 .385 1.5 1"
  ></path></svg
>

<!-- <script is:inline>
  /* SINGLE DETAILS: EXPAND AND CLOSE */
  const details = document.querySelectorAll('details');
  details.forEach((detail) => {
    const article = detail.nextElementSibling;
    detail.addEventListener('toggle', () => {
      if (detail.open) {
        article.style.maxHeight = article.scrollHeight + 'px';
      } else {
        article.style.maxHeight = 0;
      }
    });
  });

  /* MULTIPLE DETAILS: WHEN ONE EXPANDS, THE REST CLOSE */
  const detailsGroup = document.querySelectorAll('.details-group');
  detailsGroup.forEach((group) => {
    // select all the sections
    const detailsSummary = group.querySelectorAll('.details-summary');

    // for each section
    detailsSummary.forEach((summary) => {
      // select the details element
      const details = summary.querySelector('details');

      // when the details element is toggled
      details.addEventListener('toggle', () => {
        // if the details element is open
        if (details.open) {
          // close all the other details elements
          detailsSummary.forEach((s) => {
            const d = s.querySelector('details');
            if (d !== details) {
              d.removeAttribute('open');
            }
          });
        }
      });
    });
  });

  /* LIKE BUTTON */
  /*function sendLike() {
    const likeCount = document.getElementById('likeCount');
    const count = parseInt(likeCount.innerText);
    likeCount.innerText = count + 1;

    // save like count to a text file
    const articleSlug = window.location.pathname.split('/').pop();

    fetch(`/api/savearticlelikes`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ likes: count + 1, title: articleSlug }),
    });
  }*/
</script>

<script is:inline>
  // ADDING A COPY BUTTON TO CODE BLOCKS
  const codeBlocks = document.querySelectorAll('pre code');

  const codeBlockCopySvg = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M7 7m0 2.667a2.667 2.667 0 0 1 2.667 -2.667h8.666a2.667 2.667 0 0 1 2.667 2.667v8.666a2.667 2.667 0 0 1 -2.667 2.667h-8.666a2.667 2.667 0 0 1 -2.667 -2.667z" /><path d="M4.012 16.737a2.005 2.005 0 0 1 -1.012 -1.737v-10c0 -1.1 .9 -2 2 -2h10c.75 0 1.158 .385 1.5 1" /></svg>`;

  codeBlocks.forEach((codeBlock) => {
    const button = document.createElement('button');
    button.innerHTML = codeBlockCopySvg;
    button.classList.add('code-block-copy');
    button.onclick = () => {
      // An oddessy to copy the text to the clipboard
      const text = codeBlock.innerText;
      const el = document.createElement('textarea');
      el.value = text;
      el.style.position = 'absolute';
      el.style.left = '-9999px';
      document.body.appendChild(el);
      el.select();
      document.execCommand('copy');
      document.body.removeChild(el);

      // Cloning the template an config
      const notification = document
        .querySelector('.notification-item')
        .cloneNode(true);
      notification.querySelector('.notification-text').innerText =
        'Código copiado al portapapeles';

      document.querySelector('.notification-list').appendChild(notification);

      notification.style.display = 'block';
      setTimeout(() => {
        notification.style.opacity = 1;
        notification.style.transform = 'translateY(0)';
      }, 1);

      setTimeout(() => {
        notification.remove();
      }, 3000);
    };
    codeBlock.parentNode.insertBefore(button, codeBlock);
  });
</script>

<script is:inline>
  const articleImage = document.getElementById('article-image');
  // Removing the svg tags themselves
  if (articleImage)
    articleImage.innerHTML = articleImage.innerHTML
      .replace(
        '&lt;svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"&gt;',
        ''
      )
      .replace('&lt;/svg&gt;', '')
      .replace(/&gt;/g, '>')
      .replace(/&lt;/g, '<');
</script> -->

<style is:global>
  *,
  *::before,
  *::after {
    position: relative;
    margin: 0;
    padding: 0;
  }

  html {
    font-family:
      system-ui,
      -apple-system,
      BlinkMacSystemFont,
      'Segoe UI',
      Roboto,
      Oxygen,
      Ubuntu,
      Cantarell,
      'Open Sans',
      'Helvetica Neue',
      sans-serif;
  }
</style>

<style is:inline>
  #author-description::-webkit-scrollbar {
    width: 6px;
  }
  #author-description {
    scrollbar-width: thin;
  }

  #md > * {
    margin-top: 1rem;
    margin-bottom: 1rem;
  }

  #md > h1,
  #md > h2,
  #md > h3,
  #md > h4 {
    font-weight: 700;
  }

  #md > h1 {
    font-size: 32px;
  }
  #md > h2 {
    font-size: 24px;
  }
  #md > h3 {
    font-size: 20px;
  }
  #md > h4 {
    font-size: 16px;
  }
  #md > p {
    font-size: 16px;
    font-weight: 400;
    line-height: 1.5;
  }
  #md > em {
    color: #67e8f9;
  }
  #md > strong {
    letter-spacing: 1px;
  }

  pre {
    padding: 1rem;
    border-radius: 8px;
  }

  p > code {
    /* 
      This piece of code is used to make big notes, not for inline code.
     */
    display: block;
    padding: 1rem;
    border-radius: 8px;
    background-color: rgba(103, 232, 249, 0.03);
    border-width: 1px;

    border-color: rgba(103, 232, 249, 0.5);
    /* dashed border with more space between dashes */
    border-image: repeating-linear-gradient(
        to right,
        rgba(103, 232, 249, 0.5),
        rgba(103, 232, 249, 0.5) 1px,
        transparent 1px,
        transparent 4px
      )
      0 0 0 1px;

    color: #67e8f9;
    font-size: 14px;
    margin-top: 24px;
    margin-bottom: 24px;
  }

  /* BLOCKQUOTE */
  blockquote {
    /* background-color: #202023; */
    /* background-color: #1c1c1f; */
    background-color: #1a1a1d;

    background-image: url("data:image/svg+xml,%3csvg width='100%25' height='100%25' xmlns='http://www.w3.org/2000/svg'%3e%3crect width='100%25' height='100%25' fill='none' rx='8' ry='8' stroke='%23333' stroke-width='4' stroke-dasharray='6%2c 12' stroke-dashoffset='14' stroke-linecap='square'/%3e%3c/svg%3e");
    border-radius: 8px;

    padding: 16px;
    margin-top: 16px;
    margin-bottom: 16px;

    /* 
      The first child of blockquote should be a p tag
      with a font size of 16px and a font weight of 400
     */
    & > p:first-child {
      font-size: 20px;
      font-weight: 400;
    }

    & > p > em {
      /*
        This means the blockquote is actually a quoted phrase
      */
      display: block;
      font-size: 20px;
      font-weight: 400;
      margin-top: 8px;
      margin-bottom: 8px;
      margin-left: 16px;

      width: fit-content;

      color: var(--color-zinc-100);

      &::before {
        content: '“';

        font-size: 32px;
        font-weight: 700;
        color: var(--color-zinc-100);

        position: absolute;
        top: -16px;
        left: -4px;

        opacity: 0.5;

        /* z-index: -1; */

        /* 
          This is to make sure the quote is always on the left
          even if the text is centered
        */

        transform: translateX(-100%);
      }

      &::after {
        content: '”';

        font-size: 32px;
        font-weight: 700;
        color: var(--color-zinc-100);

        position: absolute;
        bottom: -16px;
        bottom: -28px;
        right: -4px;

        opacity: 0.5;

        /* 
          This is to make sure the quote is always on the right
          even if the text is centered
        */

        transform: translateX(100%);
      }
    }
  }

  /* 
    If the blockquote has a p tag that has a an em tag:
    - The background image should be removed from the blockquote element
   */
  blockquote:has(p > em) {
    background-color: inherit;
    background-image: none;

    width: fit-content;
    margin-left: auto;
    margin-right: auto;
  }

  /* LISTS */
  ul {
    list-style: disc;
    padding-left: 1rem;
  }
  ol {
    list-style: decimal;
    padding-left: 1rem;
  }
  ol > li > ol {
    list-style: lower-alpha;
  }
  ol > li > ol > li > ol {
    list-style: lower-roman;
  }
  li {
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
  }
  li > ul > li {
    list-style: circle;
  }
  li > ul > li > ul > li {
    list-style: square;
  }

  /* IMAGES and CAPTION */
  #md img {
    margin-left: auto;
    margin-right: auto;
    border-radius: 8px;
    margin-top: 32px;
    width: 100%;
    max-width: 500px;
    height: auto;
  }
  img + em {
    display: block;
    text-align: center;
    color: inherit;
    font-size: 12px;
    margin-left: auto;
    margin-right: auto;
    margin-top: 8px;
    margin-bottom: 32px;
  }

  /* TABLE */
  table {
    border-collapse: collapse;
    border-spacing: 0;
    width: 100%;
    overflow: hidden;
  }
  table th {
    font-weight: 700;
    text-align: left;
    padding: 0.5rem 1rem;
    border-bottom: 1px solid rgba(103, 232, 249, 0.5);
    background-color: transparent;
  }
  table td {
    padding: 0.5rem 1rem;
  }
  table > tbody tr:nth-child(odd) {
    background-color: rgba(103, 232, 249, 0.03);
  }
  table > tbody tr:nth-child(even) {
    background-color: rgba(103, 232, 249, 0.06);
  }
  /* last row no border bottom */
  table > tbody tr:last-child td {
    border-bottom: none;
  }

  /* HR */
  hr {
    border: none;
    border-top: 1px solid rgba(103, 232, 249, 0.5);
    margin-top: 32px !important;
    margin-bottom: 32px !important;
  }

  /* DETAILS SUMMARY */
  details {
    overflow: hidden;
  }
  details > summary::-webkit-details-marker {
    display: none;
  }
  details > summary {
    display: block;
    font-size: 16px;
    font-weight: 700;
    cursor: pointer;

    /* remove arrow */
    list-style: none;
  }
  details > summary::after {
    content: '+';
    display: inline-block;

    margin-left: 8px;

    font-size: 32px;
    font-weight: 700;

    transition: transform 0.2s ease-in-out;

    transform: rotate(0deg);

    transform-origin: center;

    position: absolute;
    right: 0;
    bottom: -8px;
  }
  details[open] > summary::after {
    transform: rotate(45deg);
  }

  .details-summary {
    margin-top: 32px !important;
    margin-bottom: 32px !important;
  }

  details + article {
    overflow: hidden;
    padding-left: 8px;
    padding-right: 32px;
    padding-top: 8px;
    max-height: 0;
    transition: max-height 0.2s ease-in-out;
  }

  kbd {
    padding: 0.05rem 0.2rem;
    margin-left: 0.025rem;
    margin-right: 0.025rem;
    border-radius: 4px;
    border-width: 1px;
    font-size: 14px;
  }

  .code-block-copy {
    position: absolute;
    top: 0;
    right: 0;
    padding: 8px;
    border-radius: 0 8px 0 8px;
    background-color: rgba(244, 244, 245, 0.03);
    cursor: pointer;
  }

  /* STACKING NOTIFICATIONS */
  .notification-list {
    position: fixed;
    bottom: 0;
    right: 0;
    padding: 16px;
    z-index: 1000;
  }

  .notification-item {
    background-color: #27272a;
    padding: 16px;
    border-radius: 8px;
    margin-top: 16px;
    margin-bottom: 16px;
    transition: all 0.4s ease-in-out;
    opacity: 0;
    transform: translateY(100%);
    display: none;
  }

  .notification-text {
    font-size: 16px;
    font-weight: 400;
  }
</style>

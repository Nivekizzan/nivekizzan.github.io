---
interface Props {
  title: string;
  description: string;
}

import Header from '@common/Header.astro';
import Nav from '@common/Nav.astro';

import { ViewTransitions } from 'astro:transitions';
---

<!doctype html>
<html lang="es-AR" class="">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={Astro.props.description} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <title>{Astro.props.title}</title>
    <ViewTransitions />
  </head>
  <!-- class="bg-zinc-100 text-zinc-900 dark:bg-zinc-900 dark:text-zinc-100 transition-colors ease-in-out duration-200 motion-reduce:transition-none motion-reduce:duration-0" -->
  <body class="bg-zinc-900 text-zinc-100 overflow-x-hidden">
    <!-- max-w-screen-2xl -->
    <div id="app" class="min-h-screen px-[32px] mx-auto pb-16 max-w-[1102px]">
      <Header />
      <Nav />
      <slot />
      <!-- <Footer /> -->
      <!-- <button class="absolute top-[16px] right-[32px]" onclick="darklight()"
        >MODO</button
      > -->
    </div>

    <style is:global>
      :root {
      }

      *,
      *::before,
      *::after {
        position: relative;
        margin: 0;
        padding: 0;
      }

      html {
        font-family:
          system-ui,
          -apple-system,
          BlinkMacSystemFont,
          'Segoe UI',
          Roboto,
          Oxygen,
          Ubuntu,
          Cantarell,
          'Open Sans',
          'Helvetica Neue',
          sans-serif;

        scrollbar-gutter: stable;
      }

      ::-webkit-scrollbar {
        height: 8px;
        width: 16px;
      }

      ::-webkit-scrollbar-track {
        background: transparent;
      }
      ::-webkit-scrollbar-thumb {
        background-color: rgba(155, 155, 155, 0.5);
        border-radius: 20px;
        border: transparent;
      }
    </style>

    <!-- <script lang="ts">
  function darklight() {
    const current = document.querySelector('html')?.classList.contains('dark');
    document.querySelector('html')?.classList.toggle('dark');
    localStorage.setItem('darkMode', !current);
  }

  function start() {
    const bLocalStorage = localStorage.getItem('darkMode');

    if (!bLocalStorage) {
      // if no local storage, set it to the browser preference
      localStorage.setItem(
        'darkMode',
        window.matchMedia('(prefers-color-scheme: dark)').matches
      );
      return;
    }

    const isDarkMode = bLocalStorage === 'true';
    if (
      isDarkMode &&
      !document.querySelector('html')?.classList.contains('dark')
    ) {
      document.querySelector('html')?.classList.add('dark');
    }
  }

  start();
</script> -->

    <!-- BLOG ITEM -->

    <script>
      document.addEventListener('astro:page-load', () => {
        const span = document.querySelectorAll(`.blog-article-anchor`);
        for (const s of span) {
          if (s.getAttribute('data-article-is-ad') === 'true') {
            // Instead of an Icon, we have an URL of the image
            s.innerHTML =
              `<img src="${s.getAttribute(
                'data-article-icon',
              )}" alt="${s.getAttribute('data-article-icon-alt')}"
              class="w-[48px] sm:min-w-[84px] sm:min-h-[84px] rounded-md"
              />` +
              s.innerHTML +
              `<svg
                class="absolute top-2 right-2"
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                stroke-width="1.5"
                stroke="currentColor"
                fill="none"
                stroke-linecap="round"
                stroke-linejoin="round"
                ><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path
                  d="M3 5m0 2a2 2 0 0 1 2 -2h14a2 2 0 0 1 2 2v10a2 2 0 0 1 -2 2h-14a2 2 0 0 1 -2 -2z"
                ></path><path d="M14 9v6h1a2 2 0 0 0 2 -2v-2a2 2 0 0 0 -2 -2h-1z"
                ></path><path d="M7 15v-4.5a1.5 1.5 0 0 1 3 0v4.5"></path><path
                  d="M7 13h3"></path></svg
              >`;

            continue;
          }

          s.innerHTML =
            (s.getAttribute('data-article-icon') ?? '') + s.innerHTML;
          const firstEl = s.firstElementChild;
          if (firstEl) {
            firstEl.classList.add(
              'w-[48px]',
              'sm:min-w-[84px]',
              'sm:min-h-[84px]',
              'rounded-md',
            );
            firstEl.setAttribute(
              'aria-label',
              s.getAttribute('data-article-icon-alt') ?? '',
            );
          }
        }
      });
    </script>

    <!-- BLOG ITEM END -->

    <!-- INDEX -->

    <script>
      const CHANNEL_ID = 'UChUg0FSY3YIeo5t6SNtlo9Q';

      const getVideos = async () => {
        const channelURL = encodeURIComponent(
          `https://www.youtube.com/feeds/videos.xml?channel_id=${CHANNEL_ID}`,
        );
        const reqURL = `https://api.rss2json.com/v1/api.json?rss_url=${channelURL}`;
        const result = await fetch(reqURL).then((response) => response.json());

        const videos = result.items;
        const lastestVideos = videos.slice(0, 4);

        const lastestVideosEl = document.getElementById('lastest-videos');

        if (!lastestVideosEl) return;

        if (lastestVideos.length > 0) lastestVideosEl.innerHTML = '';

        // just adding iframe for now
        lastestVideos.forEach((video: any) => {
          // create iframe
          const iframe = document.createElement('iframe');
          iframe.setAttribute('width', '100%');
          iframe.setAttribute('height', 'auto');
          iframe.setAttribute('loading', 'lazy');

          iframe.classList.add('rounded-md', 'mb-2');

          // get video id
          const videoId = video.link.split('=')[1];

          // set iframe src
          iframe.setAttribute(
            'src',
            `https://www.youtube.com/embed/${videoId}?controls=0`,
          );

          // create li
          const li = document.createElement('li');
          li.classList.add('flex', 'flex-col');

          // append iframe to li
          li.appendChild(iframe);

          // create span
          const span = document.createElement('span');
          span.classList.add('text-sm', 'font-semibold');
          span.textContent = video.title ?? '';

          // append span to li
          li.appendChild(span);

          // append li to ul
          lastestVideosEl?.appendChild(li);
        });
      };

      const lastestVideosEl = document.getElementById('lastest-videos');
      if (lastestVideosEl) getVideos();
    </script>

    <!-- INDEX END -->

    <!-- ARTICLES -->

    <script>
      // Load banner image in article
      document.addEventListener('astro:page-load', () => {
        let articleImage = document.querySelector('#article-image');

        if (articleImage)
          articleImage.innerHTML = articleImage.innerHTML
            .replaceAll(/&gt;/g, '>')
            .replaceAll(/&lt;/g, '<');
      });
    </script>

    <script>
      // SINGLE DETAILS: EXPAND AND CLOSE
      const details = document.querySelectorAll('details');
      details.forEach((detail) => {
        const article = detail.nextElementSibling as HTMLElement;
        detail.addEventListener('toggle', () => {
          if (detail.open) {
            article.style.maxHeight = article.scrollHeight + 'px';
          } else {
            article.style.maxHeight = '0';
          }
        });
      });

      // MULTIPLE DETAILS: WHEN ONE EXPANDS, THE REST CLOSE
      const detailsGroup = document.querySelectorAll('.details-group');
      detailsGroup.forEach((group) => {
        // select all the sections
        const detailsSummary = group.querySelectorAll('.details-summary');

        // for each section
        detailsSummary.forEach((summary) => {
          // select the details element
          const details = summary.querySelector('details');

          // when the details element is toggled
          details?.addEventListener('toggle', () => {
            // if the details element is open
            if (details.open) {
              // close all the other details elements
              detailsSummary.forEach((s) => {
                const d = s.querySelector('details');
                if (d && d !== details) {
                  d.removeAttribute('open');
                }
              });
            }
          });
        });
      });
    </script>

    <script>
      // ADDING A COPY BUTTON TO CODE BLOCKS
      const codeBlocks = document.querySelectorAll(
        'pre code',
        // Should be a CODE element inside a PRE element
      ) as NodeListOf<HTMLElement>;

      codeBlocks.forEach((codeBlock) => {
        const codeBlockCopySvg = document
          .querySelector('#code-block-copy-svg')
          ?.cloneNode(true);

        (codeBlockCopySvg as SVGElement).classList.remove('hidden');

        const button = document.createElement('button');
        if (codeBlockCopySvg) button.appendChild(codeBlockCopySvg);
        else button.innerText = 'Copy';
        button.classList.add('code-block-copy');
        button.onclick = () => {
          // An oddessy to copy the text to the clipboard
          const text = codeBlock.innerText;
          const el = document.createElement('textarea');
          el.value = text;
          el.style.position = 'absolute';
          el.style.left = '-9999px';
          document.body.appendChild(el);
          el.select();
          document.execCommand('copy');
          document.body.removeChild(el);

          // Cloning the template an config
          const notification = document
            .querySelector('.notification-item')
            ?.cloneNode(true) as HTMLElement;
          const notification_text = notification.querySelector(
            '.notification-text',
          ) as HTMLElement;
          notification_text.innerText = 'Code copied to clipboard!';

          document
            .querySelector('.notification-list')
            ?.appendChild(notification);

          notification.style.display = 'block';
          setTimeout(() => {
            notification.style.opacity = '1';
            notification.style.transform = 'translateY(0)';
          }, 1);

          setTimeout(() => {
            notification.remove();
          }, 3000);
        };
        codeBlock.parentNode?.insertBefore(button, codeBlock);
      });
    </script>

    <!-- ARTICLES END -->
  </body>
</html>
